package com.qa.Utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;
import java.util.Properties;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.options.UiAutomator2Options;
import io.appium.java_client.service.local.AppiumDriverLocalService;
import io.appium.java_client.service.local.AppiumServiceBuilder;
import lombok.SneakyThrows;


public class AndroidUtils {

	AndroidDriver driver;
	AppiumDriverLocalService service;
	FileInputStream fis;
	Properties prop;
	
	String fileSeparator = File.separator;
	String configFilePath = "C:\\Raj Setup\\Mobile_Automation\\2024_AppiumFramework\\src\\test\\resource\\TestData\\config.properties".replaceAll("\\", fileSeparator);
	String chromeDriverPath = "C:\\Raj Setup\\ChromeDriver\\V 131\\chromedriver-win64\\chromedriver.exe".replaceAll("\\", fileSeparator);
	String mainJSPath=C:\\Users\\SHRUTI\\AppData\\Roaming\\npm\\node_modules\\appium\\build\\lib\\main.js
	String nodeJSPath=C:\\Program Files\\nodejs\\node.exe
	String apkFile=C:\\Raj Setup\\Mobile_Automation\\2024_Appium\\src\\test\\resource\\General-Store.apk
	
	String ipAddress;
	String port;
	
	
	public AndroidUtils(AndroidDriver driver) {
		this.driver=driver;
		prop = new Properties();
	}
	
	@SneakyThrows
	public void initConfigProperties() {
		try {
			fis = new FileInputStream(configFilePath);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}

			try {
				prop.load(fis);
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			ipAddress = prop.getProperty("ipAddress");
			System.out.println("Ip Address is : "+ipAddress);
			port = prop.getProperty("port");
			System.out.println("Running Port is : "+port);
	}
	
	
	/**
	 * To start Appium server Automatically
	 */
	public void appiumServerConfiguration() {
		
		initConfigProperties();
		AppiumDriverLocalService service = new AppiumServiceBuilder()
				.withAppiumJS(new File("C:/Users/SHRUTI/AppData/Roaming/npm/node_modules/appium/build/lib/main.js"))
				.usingDriverExecutable(new File ("C:\\Program Files\\nodejs\\node.exe"))
				.withIPAddress(ipAddress).usingPort(Integer.parseInt(port)).build();
				service.start();
	}
	
	/**
	 * To Initialize driver and apk file
	 * @return 
	 */
	public AndroidDriver initDriver() {

//		appiumServerConfiguration();
		
		initConfigProperties();
		UiAutomator2Options options = new UiAutomator2Options();
		options.setDeviceName(prop.getProperty("deviceName"));
		System.setProperty("webdriver.chrome.driver", prop.getProperty("chromeDriverPath").replaceAll("\\", fileSeparator));
		options.setApp(prop.getProperty("apkFile"));
				 try {
					driver = new AndroidDriver(new URL("http://"+ipAddress+":"+port), options);
				} catch (MalformedURLException e) {
					e.printStackTrace();
				}	
		implicitTimeout(10);
		return driver;
	}
	
	/**
	 * To Appium server automatically
	 */
		public void tearDownAppiumServer(){
			service.stop();
		}
		
		public AndroidDriver browserTearDown() {
//			tearDownAppiumServer();
			driver.quit();
			return driver;
		}
		
		/**
		 * Static wait - Thread.sleep
		 * @param value
		 */
		public void threadSleep(int value) {
			try {
				Thread.sleep(value);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		/**
		 * To wait implicitly
		 * @param timeout
		 */
		public void implicitTimeout(int implicitTimeout) {
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(implicitTimeout));
		}
		
		
		/**
		 * PageLoadTimeout
		 * @param pageLoadTimeout
		 */
		public void pageLoadTimeout(int pageLoadTimeout) {
			driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(pageLoadTimeout));
		}
		
		
		
		
	
}
